# Generated by Django 3.2.4 on 2021-08-03 11:32

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0013_auto_20210730_1726'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Nombre')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Apellido')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(null=True, verbose_name='Edad')),
                ('address', models.CharField(max_length=1500, null=True, verbose_name='Domicilio')),
                ('phone_number', models.CharField(max_length=150, null=True, verbose_name='Número de Teléfono')),
                ('gender', models.CharField(choices=[('Femenino', 'Femenino'), ('Masculino', 'Masculino')], max_length=200, null=True, verbose_name='Género')),
                ('dni', models.PositiveIntegerField(null=True, unique=True, verbose_name='DNI')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Benefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Prestación')),
            ],
            options={
                'verbose_name': 'Prestación',
                'verbose_name_plural': 'Prestaciones',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BodyPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Parte del Cuerpo')),
            ],
            options={
                'verbose_name': 'Parte del Cuerpo',
                'verbose_name_plural': 'Partes del Cuerpo',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='MedicalBackground',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(verbose_name='Peso (kg)')),
                ('height', models.FloatField(verbose_name='Altura (m)')),
                ('bmi', models.FloatField(verbose_name='Índice de Masa Corporal')),
                ('abdominal_perimeter', models.FloatField(verbose_name='Perímetro Abdominal (cm)')),
                ('measured_date', models.DateField(null=True, verbose_name='Fecha de Medidas')),
                ('blood_pressure_high', models.PositiveIntegerField(verbose_name='PH Alta')),
                ('blood_pressure_low', models.PositiveIntegerField(verbose_name='PH Baja')),
                ('medic', models.CharField(max_length=150, verbose_name='Médico de Cabecera')),
                ('enrollment', models.CharField(max_length=150, null=True, verbose_name='Matrícula')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de Carga')),
                ('date_changed', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Modificación')),
            ],
        ),
        migrations.CreateModel(
            name='RiskFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk', models.CharField(max_length=150, verbose_name='Factor de Riesgo')),
            ],
            options={
                'verbose_name': 'Factor de Riesgo',
                'verbose_name_plural': 'Factores de Riesgo',
                'ordering': ['risk'],
            },
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Especialidad')),
            ],
            options={
                'verbose_name': 'Especialidad',
                'verbose_name_plural': 'Especialidades',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SurgicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surgical_history', models.CharField(blank=True, max_length=150, verbose_name='Antecedente Quirúrgico')),
                ('date_surgical', models.DateField(blank=True, null=True, verbose_name='Fecha de Cirugía')),
                ('institution', models.CharField(blank=True, max_length=150, verbose_name='Institución')),
                ('sequel', models.CharField(blank=True, max_length=150, verbose_name='Secuela (si hubiera)')),
                ('medical_background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.medicalbackground', verbose_name='Antecedentes Médicos')),
            ],
        ),
        migrations.CreateModel(
            name='Pathology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Patología')),
                ('description', models.CharField(max_length=1500, verbose_name='Descripción')),
                ('body_parts', models.ManyToManyField(to='app.BodyPart', verbose_name='Partes del Cuerpo afectadas')),
            ],
            options={
                'verbose_name': 'Patología',
                'verbose_name_plural': 'Patologías',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation', models.CharField(blank=True, max_length=150, verbose_name='Observaciones')),
                ('medical_background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.medicalbackground', verbose_name='Antecedentes Médicos')),
            ],
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication', models.CharField(blank=True, max_length=150, verbose_name='Medicaciones')),
                ('medical_background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.medicalbackground', verbose_name='Antecedentes Médicos')),
            ],
        ),
        migrations.AddField(
            model_name='medicalbackground',
            name='risk_factors',
            field=models.ManyToManyField(to='app.RiskFactor', verbose_name='Factores de Riesgo'),
        ),
        migrations.CreateModel(
            name='Professional',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.user')),
                ('enrollment', models.CharField(max_length=150, null=True, verbose_name='Matrícula')),
                ('college', models.CharField(max_length=500, null=True, verbose_name='Colegio Profesional')),
                ('other_formations', models.CharField(max_length=500, null=True, verbose_name='Otras Formaciones')),
                ('specialties', models.ManyToManyField(to='app.Specialty', verbose_name='Especialidades')),
            ],
            options={
                'verbose_name': 'Profesional',
                'verbose_name_plural': 'Profesionales',
                'ordering': ['id'],
            },
            bases=('app.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.user')),
                ('contact_number', models.CharField(max_length=150, verbose_name='Número de Contacto')),
                ('relationship', models.CharField(max_length=150, verbose_name='Parentesco')),
                ('benefit_type', models.CharField(max_length=150, verbose_name='Detalle')),
                ('benefit_number', models.CharField(max_length=150, verbose_name='Número de Registro')),
                ('work_activity', models.CharField(choices=[('Si', 'Si'), ('No', 'No')], max_length=200, null=True, verbose_name='Actividad Laboral')),
                ('work_branch', models.CharField(max_length=200, null=True, verbose_name='Rama Laboral')),
                ('physical_activity', models.CharField(choices=[('Si', 'Si'), ('No', 'No')], max_length=200, null=True, verbose_name='¿Realiza Actividad Física?')),
                ('competition', models.CharField(choices=[('Si', 'Si'), ('No', 'No')], max_length=200, null=True, verbose_name='¿Es Competitiva?')),
                ('type_physical_activity', models.CharField(max_length=2000, null=True, verbose_name='Actividad Física')),
                ('dominance', models.CharField(choices=[('Derecha', 'Derecha'), ('Izquierda', 'Izquierda')], max_length=200, null=True, verbose_name='Dominancia')),
                ('benefit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.benefit', verbose_name='Prestación')),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': 'Pacientes',
                'ordering': ['id'],
            },
            bases=('app.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='medicalbackground',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.patient', verbose_name='Paciente'),
        ),
    ]
